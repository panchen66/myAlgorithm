package com.panchen.interviewPreparation;

/**
 * @Description:
 *
 * 红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：
 *
 * 性质1：每个节点要么是黑色，要么是红色。
 * 性质2：根节点是黑色。
 * 性质3：每个叶子节点（NIL）是黑色。
 * 性质4：每个红色结点的两个子结点一定都是黑色。
 * 性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。
 * 从性质5又可以推出：
 *
 * 性质5.1：如果一个结点存在黑子结点，那么该结点肯定有两个子结点
 *
 *
 * 跟平衡二叉树的区别 ：
 *
 * AVL树是一棵严格的平衡树，它所有的子树都满足二叉平衡树的定义。因此AVL树高被严格控制，因此AVL树的查找比较高效。但AVL树插入、删除结点后旋转的次数比红黑树多。
 *
 * 红黑树用非严格的平衡来降低插入删除时旋转的次数。
 *
 * 因此，如果你的业务中查找远远多于插入、删除，那选AVL树； 
 * 如果查找、插入、删除频率差不多，那么选择红黑树。
 *
 * @author: chenp
 * @date: 2020/02/16 14:25
 */
public class RedBlackTree {

}
